export default class User{
    constructor(){
    }

    getRisk(rating) {
        switch (rating) {
            case 1:
                return { label: 'An to√†n', color: 'green' };
            case 2:
                return { label: 'T·ªët', color: 'goldenrod' };
            case 3:
                return { label: 'Nguy hi·ªÉm', color: 'orange' };
            case 4:
                return { label: 'C·ª±c k·ª≥ x·∫•u', color: 'red' };
            default:
                return { label: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'gray' };
        }
    }


    searchStock(stocks, userPortfolios) {
        const keyword = document.getElementById('searchInput').value.trim().toUpperCase();
        const filtered = stocks.filter(stock => stock.code.includes(keyword));
        this.renderTable(filtered, userPortfolios);
    }

    searchStockProfile(stocks) {
        const keyword = document.getElementById('searchInput').value.trim().toUpperCase();
        const filtered = stocks.filter(stock => stock.code.includes(keyword));
        this.renderTableProfile(filtered);
    }

    searchStockInvest(stocks) {
        const keyword = document.getElementById('searchInput').value.trim().toUpperCase();
        const filtered = stocks.filter(stock => stock.code.includes(keyword));
        this.renderTableInvest(filtered);
    }

    searchStockUserFollow(stocks, userFollow) {
        const keyword = document.getElementById('searchInput').value.trim().toUpperCase();
        const filtered = stocks.filter(stock => stock.code.includes(keyword));
        this.renderTable(filtered, userFollow);
    }

    getRowClass(goodPrice, currentPrice) {
        if (currentPrice > goodPrice) {
            const percentDiff = ((currentPrice - goodPrice) / goodPrice) * 100;
            if (percentDiff <= 10) {
                return 'yellow';
            }else {
                return '';
            }
        } else if (currentPrice <= goodPrice) {
            const percentDiff = ((goodPrice - currentPrice) / goodPrice) * 100;
            if (percentDiff > 20) {
                return 'red';
            } else if (percentDiff > 10){
                return 'purple';
            } else{
                return 'green';
            }
        }
    }

    renderTable(data, userProfile) {
         // 1. T·∫°o danh s√°ch m√£ CK trong danh m·ª•c ƒë·∫ßu t∆∞
        const portfolioCodes = userProfile.map(p => p.code);

        // 2. T√°ch d·ªØ li·ªáu th√†nh 2 nh√≥m: ∆∞u ti√™n v√† c√≤n l·∫°i
        const prioritizedStocks = data.filter(stock => portfolioCodes.includes(stock.code));
        const remainingStocks = data.filter(stock => !portfolioCodes.includes(stock.code));

        // 3. G·ªôp l·∫°i: m√£ trong danh m·ª•c ƒë·∫ßu t∆∞ s·∫Ω hi·ªÉn th·ªã tr∆∞·ªõc
        const sortedData = [...prioritizedStocks, ...remainingStocks];

        const tbody = document.getElementById('stockTableBody');
        tbody.innerHTML = '';
        sortedData.forEach(stock => {
            const goodPrice = parseFloat(stock.recommended_buy_price);
            const currentPrice = parseFloat(stock.current_price);
            const valuation = currentPrice !== 0 ? ((currentPrice / goodPrice) * 100 - 100).toFixed(2) : 0;
            
            let valuationColor = 'yellow';
            let sign = '';
            if (valuation > 0) {
                valuationColor = 'green';
                sign = '+';
            } else if (valuation < 0) {
                valuationColor = 'red';
                sign = '';
            }

            const row = document.createElement('tr');
            // G·ªôp class m√†u ƒë·ªãnh gi√° v√† class n·ªïi b·∫≠t
            const isInPortfolio = userProfile.some(port => port.code === stock.code);
            const valuationClass = this.getRowClass(parseFloat(stock.recommended_buy_price), parseFloat(stock.current_price));
            row.className = valuationClass;
            if (isInPortfolio) {
                row.className = `${valuationClass} highlighted-row`;
            } else {
                row.className = valuationClass;
            }

            row.innerHTML = `
                <td><a href="https://fireant.vn/dashboard/content/symbols/${stock.code}" target="_blank" style="color: inherit; text-decoration: none;">${stock.code}</a></td>
                <td>${Number(stock.recommended_buy_price).toLocaleString('vi-VN')}</td>
                <td>${Number(stock.current_price).toLocaleString('vi-VN')}</td>
                <td style="color: ${this.getRisk(stock.risk_level).color}">
                    ${this.getRisk(stock.risk_level).label}
                </td>
                <td style="color: ${valuationColor}">
                <div class="action-cell">
                    <span class="profit">${sign}${valuation}%</span>
                </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    renderTableProfile(data) {
        const tbody = document.getElementById('stockTableBody');
        tbody.innerHTML = '';

        let totalQuantity = 0;
        let totalProfit = 0;
        let totalCost = 0;
        let totalCurrentValue = 0;
        let totalInvested = 0;

        data.forEach(userPortfolio => {
            const row = document.createElement('tr');

            const total_quantity = Number(userPortfolio.total_quantity);
            const avg_price = Number(userPortfolio.avg_buy_price);
            const current_price = Number(userPortfolio.current_price);

            const cost = avg_price * total_quantity;
            const currentValue = current_price * total_quantity;
            const profit = currentValue - cost;
            const profitPercent = (profit / cost) * 100;

            // C·ªông d·ªìn cho d√≤ng t·ªïng
            totalQuantity += total_quantity;
            totalProfit += profit;
            totalCost += cost;
            totalCurrentValue += currentValue;
            totalInvested += avg_price * total_quantity;

            // M√†u v√† d·∫•u ti·ªÅn l√£i
            let profitColor = profit > 0 ? 'green' : profit < 0 ? 'red' : 'orange';
            let profitSign = profit > 0 ? '+' : profit < 0 ? '-' : '+';

            // M√†u v√† d·∫•u % l√£i
            let percentColor = profitPercent > 0 ? 'green' : profitPercent < 0 ? 'red' : 'orange';
            let percentSign = profitPercent > 0 ? '+' : profitPercent < 0 ? '-' : '+';

            row.innerHTML = `
                <td><a href="https://fireant.vn/dashboard/content/symbols/${userPortfolio.code}" target="_blank" style="color: inherit; text-decoration: none;">${userPortfolio.code}</a></td>
                <td>${total_quantity.toLocaleString('vi-VN')}</td>
                <td>${avg_price.toLocaleString('vi-VN')}</td>
                <td>${current_price.toLocaleString('vi-VN')}</td>
                <td>${(avg_price * total_quantity).toLocaleString('vi-VN')}</td>
                <td style="color:${profitColor}">${profitSign}${Math.abs(profit).toLocaleString('vi-VN')}</td>
                <td style="color:${percentColor}">${percentSign}${Math.abs(profitPercent).toFixed(2)}%</td>
            `;
            tbody.appendChild(row);
        });

        // T√≠nh t·ªïng ph·∫ßn trƒÉm l√£i
        const totalProfitPercent = (totalCost > 0) ? (totalProfit / totalCost) * 100 : 0;

        // M√†u v√† d·∫•u t·ªïng ti·ªÅn l√£i
        const totalProfitColor = totalProfit > 0 ? 'green' : totalProfit < 0 ? 'red' : 'orange';
        const totalProfitSign = totalProfit > 0 ? '+' : totalProfit < 0 ? '-' : '+';

        // M√†u v√† d·∫•u t·ªïng % l√£i
        const totalPercentColor = totalProfitPercent > 0 ? 'green' : totalProfitPercent < 0 ? 'red' : 'orange';
        const totalPercentSign = totalProfitPercent > 0 ? '+' : totalProfitPercent < 0 ? '-' : '+';

        // D√≤ng t·ªïng c·ªông
        const totalRow = document.createElement('tr');
        totalRow.innerHTML = `
            <td><strong>T·ªïng:</strong></td>
            <td><strong>${totalQuantity.toLocaleString('vi-VN')}</strong></td>
            <td><strong>${totalCost.toLocaleString('vi-VN')}</strong></td>
            <td><strong>${totalCurrentValue.toLocaleString('vi-VN')}</strong></td>
            <td><strong>${totalInvested.toLocaleString('vi-VN')}</strong></td>
            <td style="color:${totalProfitColor}"><strong>${totalProfitSign}${Math.abs(totalProfit).toLocaleString('vi-VN')}</strong></td>
            <td style="color:${totalPercentColor}"><strong>${totalPercentSign}${Math.abs(totalProfitPercent).toFixed(2)}%</strong></td>
        `;
        tbody.appendChild(totalRow);
    }
    
    renderTableInvest(data) {
        const tbody = document.getElementById('stockTableBody');
        tbody.innerHTML = '';

        let totalQuantity = 0;
        let totalValue = 0;
        let totalProfit = 0;
        let capitalIn = 0; // ti·ªÅn n·∫°p th·ª±c t·∫ø
        let cash = 0; // ti·ªÅn m·∫∑t hi·ªán c√≥ t·ª´ b√°n ra
        

        // üëâ S·∫Øp x·∫øp data theo ng√†y giao d·ªãch tƒÉng d·∫ßn
        data.sort((a, b) => {
            const dateA = new Date(a.buy_date || a.sell_date);
            const dateB = new Date(b.buy_date || b.sell_date);
            return dateA - dateB; // N·∫øu mu·ªën gi·∫£m d·∫ßn th√¨ d√πng: dateB - dateA
        });

        data.forEach(stock => {
            const price = stock.buy_price !== undefined && stock.buy_price !== null ? stock.buy_price : stock.sell_price;
            const date = stock.buy_date !== undefined && stock.buy_date !== null ? stock.buy_date : stock.sell_date;
            const type =  stock.buy_price !== undefined && stock.buy_price !== null ? "Buy" : "Sell";

            const quantity = parseInt(stock.quantity);
            const currentPrice = parseFloat(stock.current_price);
            const row = document.createElement('tr');

            // T√≠nh t·ªïng s·ªë l∆∞·ª£ng v√† gi√° tr·ªã
            totalQuantity += quantity;
            totalValue += quantity * price;

            // T√≠nh l√£i/l·ªó:
            if (type === "Buy") {
                const totalBuyCost = price * quantity;

                // N·∫øu c√≥ ƒë·ªß ti·ªÅn m·∫∑t th√¨ d√πng ti·ªÅn m·∫∑t
                if (cash >= totalBuyCost) {
                    cash -= totalBuyCost;
                } else {
                    const needToInject = totalBuyCost - cash;
                    capitalIn += needToInject; // ph·∫£i n·∫°p th√™m ti·ªÅn th·∫≠t
                    cash = 0;
                }

                totalProfit += (currentPrice - price) * quantity;
            } else {
                const totalSellRevenue = price * quantity;
                cash += totalSellRevenue;

                totalProfit += (price - currentPrice) * quantity; // ho·∫∑c ƒëi·ªÅu ch·ªânh tu·ª≥ logic b·∫°n
            }

            row.className = this.getRowClass(parseFloat(stock.recommended_buy_price), parseFloat(stock.current_price));
            row.innerHTML = `
                <td><a href="https://fireant.vn/dashboard/content/symbols/${stock.code}" target="_blank" style="color: inherit; text-decoration: none;">${stock.code}</a></td>
                <td>${Number(stock.quantity).toLocaleString('vi-VN')}</td>
                <td>${Number(price).toLocaleString('vi-VN')}</td>
                <td>${Number(stock.quantity * price).toLocaleString('vi-VN')}</td>
                <td>${date}</td>
                <td><div class="${type}">${type}</div></td>
            `;
            tbody.appendChild(row);
        });

        // X√°c ƒë·ªãnh m√†u d·ª±a v√†o t·ªïng l√£i
        let profitColor = 'orange';
        let profitSign = '';
        if (totalProfit > 0) {
            profitColor = 'green';
            profitSign = '+';
        } else if (totalProfit < 0) {
            profitColor = 'red';
            profitSign = '-';
        }

        // T·∫°o d√≤ng t·ªïng c·ªông
        const totalRow = document.createElement('tr');
        totalRow.innerHTML = `
            <td><strong>T·ªïng :</strong></td>
            <td><strong>${totalQuantity.toLocaleString('vi-VN')}</strong></td>
            <td><strong>${capitalIn.toLocaleString('vi-VN')}</strong></td>
            <td><strong>${totalValue.toLocaleString('vi-VN')}</strong></td>
            <td></td>
            <td><strong style="color:${profitColor}">Ti·ªÅn l√£i: ${profitSign}${Math.abs(totalProfit).toLocaleString('vi-VN')}</strong></td>
        `;
        tbody.appendChild(totalRow);
    }

    renderTableUserFollow(data, userFollow) {
         // 1. T·∫°o danh s√°ch m√£ CK trong danh m·ª•c ƒë·∫ßu t∆∞
        const portfolioCodes = userFollow.map(p => p.code);

        // 2. T√°ch d·ªØ li·ªáu th√†nh 2 nh√≥m: ∆∞u ti√™n v√† c√≤n l·∫°i
        const prioritizedStocks = data.filter(stock => portfolioCodes.includes(stock.code));
        const remainingStocks = data.filter(stock => !portfolioCodes.includes(stock.code));

        // 3. G·ªôp l·∫°i: m√£ trong danh m·ª•c ƒë·∫ßu t∆∞ s·∫Ω hi·ªÉn th·ªã tr∆∞·ªõc
        const sortedData = [...prioritizedStocks, ...remainingStocks];

        const tbody = document.getElementById('stockTableBody');
        tbody.innerHTML = '';
        sortedData.forEach(stock => {
            const goodPrice = parseFloat(stock.recommended_buy_price);
            const currentPrice = parseFloat(stock.current_price);
            const valuation = currentPrice !== 0 ? ((currentPrice / goodPrice) * 100 - 100).toFixed(2) : 0;
            
            let valuationColor = 'yellow';
            let sign = '';
            if (valuation > 0) {
                valuationColor = 'green';
                sign = '+';
            } else if (valuation < 0) {
                valuationColor = 'red';
                sign = '';
            }

            const row = document.createElement('tr');
            // G·ªôp class m√†u ƒë·ªãnh gi√° v√† class n·ªïi b·∫≠t
            const isInPortfolio = userFollow.some(port => port.code === stock.code);
            const valuationClass = this.getRowClass(parseFloat(stock.recommended_buy_price), parseFloat(stock.current_price));
            if (isInPortfolio) {
                row.className = `${valuationClass} highlighted-row`;
            } else {
                row.className = valuationClass;
            }

            row.innerHTML = `
                <td><a href="https://fireant.vn/dashboard/content/symbols/${stock.code}" target="_blank" style="color: inherit; text-decoration: none;">${stock.code}</a></td>
                <td>${Number(stock.recommended_buy_price).toLocaleString('vi-VN')}</td>
                <td>${Number(stock.current_price).toLocaleString('vi-VN')}</td>
                <td style="color: ${this.getRisk(stock.risk_level).color}">
                    ${this.getRisk(stock.risk_level).label}
                </td>
                <td style="color: ${valuationColor}">
                <div class="action-cell">
                    <span class="profit">${sign}${valuation}%</span>
                    ${isInPortfolio ? `<button class="btn-delete" onclick="confirmDelete('${stock.code}')">Delete</button>` : ''}
                </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }
    
}
